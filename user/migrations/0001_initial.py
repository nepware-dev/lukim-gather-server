# Generated by Django 3.2.11 on 2022-01-14 07:56

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import lukimgather.auth_validators
import lukimgather.fields
import lukimgather.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', lukimgather.fields.LowerCharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. Length can be between 5 to 20. Letters, digits and ./-/_ only.', max_length=20, unique=True, validators=[lukimgather.auth_validators.CustomASCIIUsernameValidator, django.core.validators.MinLengthValidator(limit_value=5)], verbose_name='Username')),
                ('email', lukimgather.fields.LowerEmailField(error_messages={'unique': 'A user with that email already exists.'}, max_length=254, unique=True, verbose_name='Email Address')),
                ('is_active', models.BooleanField(default=False, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='Active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', lukimgather.managers.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PasswordResetPin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('no_of_incorrect_attempts', models.PositiveIntegerField(default=0, verbose_name='No Of Incorrect Attempts')),
                ('pin', models.PositiveIntegerField(validators=[django.core.validators.MinLengthValidator(6), django.core.validators.MaxLengthValidator(6)], verbose_name='Pin')),
                ('pin_expiry_time', models.DateTimeField(verbose_name='Pin Expiry Time')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('identifier', models.CharField(max_length=16, verbose_name='Identifier')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_pin', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EmailConfirmationPin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('no_of_incorrect_attempts', models.PositiveIntegerField(default=0, verbose_name='No Of Incorrect Attempts')),
                ('pin', models.PositiveIntegerField(validators=[django.core.validators.MinLengthValidator(6), django.core.validators.MaxLengthValidator(6)], verbose_name='Pin')),
                ('pin_expiry_time', models.DateTimeField(verbose_name='Pin Expiry Time')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='email_confirm_pin', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EmailChangePin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('no_of_incorrect_attempts', models.PositiveIntegerField(default=0, verbose_name='No Of Incorrect Attempts')),
                ('pin', models.PositiveIntegerField(validators=[django.core.validators.MinLengthValidator(6), django.core.validators.MaxLengthValidator(6)], verbose_name='Pin')),
                ('pin_expiry_time', models.DateTimeField(verbose_name='Pin Expiry Time')),
                ('new_email', lukimgather.fields.LowerEmailField(max_length=254)),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='email_change_pin', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
